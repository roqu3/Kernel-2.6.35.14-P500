commit 52b6b1b626c871ed4efefeabef2b7a80510d321e
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Fri Dec 3 22:58:05 2010 +0100

    PM: Prevent dpm_prepare() from returning errors unnecessarily
    
    Currently dpm_prepare() returns error code if it finds that a device
    being suspended has a pending runtime resume request.  However, it
    should not do that if the checking for wakeup events is not enabled.
    On the other hand, if the checking for wakeup events is enabled, it
    can return error when a wakeup event is detected, regardless of its
    source.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>

diff --git a/drivers/base/power/main.c b/drivers/base/power/main.c
index de7ea7f..4de226a 100644
--- a/drivers/base/power/main.c
+++ b/drivers/base/power/main.c
@@ -26,7 +26,7 @@
 #include <linux/interrupt.h>
 #include <linux/sched.h>
 #include <linux/async.h>
-#include <linux/timer.h>
+#include <linux/suspend.h>
 
 #include "../base.h"
 #include "power.h"
@@ -1105,8 +1105,10 @@ static int dpm_prepare(pm_message_t state)
 		mutex_unlock(&dpm_list_mtx);
 
 		pm_runtime_get_noresume(dev);
-		if (pm_runtime_barrier(dev) && device_may_wakeup(dev)) {
-			/* Wake-up requested during system sleep transition. */
+		if (pm_runtime_barrier(dev) && device_may_wakeup(dev))
+			pm_wakeup_event(dev, 0);
+
+		if (!pm_check_wakeup_events()) {
 			pm_runtime_put_sync(dev);
 			error = -EBUSY;
 		} else {
@@ -1121,8 +1123,8 @@ static int dpm_prepare(pm_message_t state)
 				error = 0;
 				continue;
 			}
-			printk(KERN_ERR "PM: Failed to prepare device %s "
-				"for power transition: error %d\n",
+			printk(KERN_INFO "PM: Device %s not prepared "
+				"for power transition: code %d\n",
 				kobject_name(&dev->kobj), error);
 			put_device(dev);
 			break;
