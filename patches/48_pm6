commit 63bdb97c5a746e8038233e4fbc58cfc86cc9baff
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Thu Jun 16 23:05:15 2011 -0400

    PM: Allow wakeup events to abort freezing of tasks
    
    If there is a wakeup event during the freezing of tasks, suspend or
    hibernation will fail anyway.  Since try_to_freeze_tasks() can take
    up to 20 seconds to complete or fail, aborting it as soon as a wakeup
    event is detected improves the worst case wakeup latency.
    
    Based on a patch from Arve Hjønnevåg.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Pavel Machek <pavel@ucw.cz>

diff --git a/include/linux/suspend.h b/include/linux/suspend.h
index bf1bab7..e97c897 100644
--- a/include/linux/suspend.h
+++ b/include/linux/suspend.h
@@ -306,6 +306,8 @@ static inline int unregister_pm_notifier(struct notifier_block *nb)
 }
 
 #define pm_notifier(fn, pri)	do { (void)(fn); } while (0)
+
+static inline bool pm_check_wakeup_events(void) { return true; }
 #endif /* !CONFIG_PM_SLEEP */
 
 extern struct mutex pm_mutex;
diff --git a/kernel/power/process.c b/kernel/power/process.c
index d7d71b3..d7e4e40 100644
--- a/kernel/power/process.c
+++ b/kernel/power/process.c
@@ -39,7 +39,7 @@ static int try_to_freeze_tasks(bool sig_only)
 	struct timeval start, end;
 	u64 elapsed_csecs64;
 	unsigned int elapsed_csecs;
-	unsigned int wakeup = 0;
+	bool wakeup = false;
 
 	do_gettimeofday(&start);
 
@@ -72,6 +72,11 @@ static int try_to_freeze_tasks(bool sig_only)
 		if (!todo || time_after(jiffies, end_time))
 			break;
 
+		if (!pm_check_wakeup_events()) {
+			wakeup = true;
+			break;
+		}
+
 		/*
 		 * We need to retry, but first give the freezing tasks some
 		 * time to enter the regrigerator.
@@ -97,15 +102,15 @@ static int try_to_freeze_tasks(bool sig_only)
 		}
 		else {
 			printk("\n");
-			printk(KERN_ERR "Freezing of tasks failed after %d.%02d seconds "
+			printk(KERN_ERR "Freezing of tasks %s after %d.%02d seconds "
 					"(%d tasks refusing to freeze):\n",
+					wakeup ? "aborted" : "failed",
 					elapsed_csecs / 100, elapsed_csecs % 100, todo);
 		}
 		read_lock(&tasklist_lock);
 		do_each_thread(g, p) {
 			task_lock(p);
-			if (freezing(p) && !freezer_should_skip(p) &&
-				elapsed_csecs > 100)
+			if (!wakeup && freezing(p) && !freezer_should_skip(p))
 				sched_show_task(p);
 			cancel_freezing(p);
 			task_unlock(p);
