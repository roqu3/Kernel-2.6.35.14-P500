commit c0d5d647a1bf1b1e4f939826463490f26a2a6212
Author: Umaro <umaro@narshe.net>
Date:   Tue Jun 21 20:43:31 2011 +0200

    tmpfs: fix race between truncate and writepage
    
        commit 826267cf1e6c6899eda1325a19f1b1d15c558b20 upstream.
    
        While running fsx on tmpfs with a memhog then swapoff, swapoff was hanging
        (interruptibly), repeatedly failing to locate the owner of a 0xff entry in
        the swap_map.
    
        Although shmem_writepage() does abandon when it sees incoming page index
        is beyond eof, there was still a window in which shmem_truncate_range()
        could come in between writepage's dropping lock and updating swap_map,
        find the half-completed swap_map entry, and in trying to free it,
        leave it in a state that swap_shmem_alloc() could not correct.
    
        Arguably a bug in __swap_duplicate()'s and swap_entry_free()'s handling
        of the different cases, but easiest to fix by moving swap_shmem_alloc()
        under cover of the lock.
    
        More interesting than the bug: it's been there since 2.6.33, why could
        I not see it with earlier kernels?  The mmotm of two weeks ago seems to
        have some magic for generating races, this is just one of three I found.
    
        With yesterday's git I first saw this in mainline, bisected in search of
        that magic, but the easy reproducibility evaporated.  Oh well, fix the bug.
    
        Signed-off-by: Hugh Dickins <hughd@google.com>
        Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
        Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/mm/shmem.c b/mm/shmem.c
index 5446c68..88e47f4 100644
--- a/mm/shmem.c
+++ b/mm/shmem.c
@@ -1088,8 +1088,8 @@ static int shmem_writepage(struct page *page, struct writeback_control *wbc)
 			inode = igrab(inode);
 		else
 			inode = NULL;
-		spin_unlock(&info->lock);
 		swap_shmem_alloc(swap);
+		spin_unlock(&info->lock);
 		BUG_ON(page_mapped(page));
 		page_cache_release(page);	/* pagecache ref */
 		swap_writepage(page, wbc);
